#!/usr/bin/python3

import argparse
import email
import email.policy
import re
import os
import os.path
import subprocess
import shutil
import sys

parser = argparse.ArgumentParser()
parser.add_argument('--me', type=str, default='sdf@fomichev.me,stfomichev@gmail.com')
parser.add_argument('--ignore', type=str, default='patchwork-bot+netdevbpf@kernel.org')
parser.add_argument('--linux', type=str, default='/home/sdf/src/linux')
parser.add_argument('--inbox', type=str, default='/home/sdf/Mail/all')
parser.add_argument('--archive', type=str, default='/home/sdf/Mail/archive/new')
parser.add_argument('--dry', default=False, action='store_true')

args = parser.parse_args()

def parse_dir(path):
    ret = {}

    for name in os.listdir(path):
        mail = os.path.join(path, name)
        if not os.path.isfile(mail):
            continue

        msg = None
        for encoding in [ "utf-8", "ISO-8859-1" ]:
            try:
                with open(mail, "r", encoding=encoding) as file:
                    policy = email.policy.EmailPolicy(utf8=True)
                    msg = email.message_from_file(file, policy=policy)
                    break
            except Exception as e:
                print(f"Parsing {mail} as {encoding} failed: {e}")

        if msg is None:
            raise Exception(f'could not decode {file}')

        if 'Message-Id' not in msg:
            continue
        if 'Subject' not in msg:
            continue

        d = {}

        d['Message-Id'] = re.sub(r'[<>]', '', msg['Message-Id'])
        if 'In-Reply-To' in msg:
            d['In-Reply-To'] = re.sub(r'[<>]', '', msg['In-Reply-To'])
        d['Subject'] = msg['Subject']
        d['To'] = msg['To']
        d['From'] = msg['From']

        ret[mail] = d

    return ret

def parse_mbox(path):
    cur = parse_dir(os.path.join(path, 'cur'))
    new = parse_dir(os.path.join(path, 'new'))
    return cur | new

def flagged(path):
    flags = path.split(',')[-1]
    return 'F' in flags

def have_top_message(mbox, id2path, id):
    while True:
        if id not in id2path:
            return False

        path = id2path[id]
        if flagged(path):
            return true

        d = mbox[path]
        if 'In-Reply-To' not in d:
            return True

        id = d['In-Reply-To']

    return False

def flag_to_me(new, me):
    mbox = parse_dir(new)
    for path in mbox:
        for email in me:
            if email in mbox[path]['To']:
                if not flagged(path):
                    dst = path + "F"
                    if not args.dry:
                        shutil.move(path, dst)
                    print(f'flag {path} -> {dst}')
                else:
                    print(f'skip flaged {path}')

def filter_out_flagged(mbox):
    ret = {}

    for key, val in mbox.items():
        if flagged(key):
            continue
        ret[key] = val

    return ret

def unread_ignored(new, cur, ignore):
    mbox = parse_dir(new)
    for path in mbox:
        for email in ignore:
            if email in mbox[path]['From']:
                dst = path.replace(new, cur)
                if not args.dry:
                    print(f'unread {path} -> {dst} (from {email})')
                    shutil.move(path, dst)

flag_to_me(os.path.join(args.inbox, 'new'), args.me.split(','))
unread_ignored(os.path.join(args.inbox, 'new'), os.path.join(args.inbox, 'cur'), args.ignore.split(','))

inbox = parse_mbox(args.inbox)
inbox = filter_out_flagged(inbox)

id2path = {}

for path, d in inbox.items():
    id2path[d['Message-Id']] = path

move = []

for path in inbox:
    if not have_top_message(inbox, id2path, inbox[path]['Message-Id']):
        move.append(path)

for path in move:
    print(f'move {path}: {inbox[path]["Subject"]}')

if not args.dry:
    for src in move:
        dst = os.path.join(args.archive, os.path.basename(src))
        print(f'{src} -> {dst}')
        shutil.move(src, dst)
