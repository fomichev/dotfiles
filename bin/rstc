#!/bin/bash

set -x
set -eo pipefail

source ~/.secret/restic-settings

SERVICE=restic.service

say() {
	echo ">> $@" | $HOME/bin/colorify
}

if [[ -z "$REPO" ]]; then
	say '$REPO is not specified!'
	exit 1
fi

failure() {
	do_notify "error"
}

do_rstc() {
	say restic -r "$REPO" "$@"
	set +e
	sudo -E restic -r "$REPO" "$@" 2>&1 | cat
	ret=$?
	set -e

	if [[ $ret -eq 0 ]]; then return 0; fi
	# https://github.com/restic/restic/issues/3098
	if [[ $ret -eq 3 ]]; then return 0; fi
	exit $ret
}

docker_update() {
	if [ ! -d $HOME/src/docker ]; then
		return
	fi

	say 'update docker'
	for d in $HOME/src/docker/*; do
		pushd $d
		docker compose pull -q
		docker compose stop
		docker compose up -d
		popd
	done
}

system_upgrade() {
	say 'update system'
	sudo /usr/bin/pacman --noconfirm -Sy archlinux-keyring
	sudo /usr/bin/pacman --noconfirm -Syu
	local orphans="$(pacman -Qqtd)"
	if [[ ! -z "$orphans" ]]; then
		say 'remove orphans'
		sudo /usr/bin/pacman --noconfirm -Rs $(pacman -Qqtd)
	fi
}

adblock_upgrade() {
	if [ -e /usr/local/bin/update_unblock ]; then
		say 'update adblock'
		sudo /usr/local/bin/update_unblock
	fi
}

system_pacnew() {
	local ret=$(find / -name '*.pacnew' 2>/dev/null)
	if [ ! -z "$ret" ]; then
		echo "$ret"
		do_notify "pacnew"
	fi
}

system_cleanup() {
	say 'cleanup'
	sudo /usr/bin/journalctl --vacuum-time=7d || :
	if command -v flatpak &> /dev/null; then
		flatpak uninstall --assumeyes --noninteractive --unused || :
	fi
	sudo /usr/bin/pacman --noconfirm -Scc || :
}

standard_notes() {
	local oldest_backup=$(ls -t ~/Downloads/Standard\ Notes\ Backup\ -\ S*.zip | head -n1)
	if [[ -z "$oldest_backup" ]]; then
		echo "Skipping notes backup!"
		return
	fi
	echo "Saving oldest notes backup: $oldest_backup"
	unzip -c "$oldest_backup" 'Standard Notes Backup and Import File.txt' | pass insert -mf notes
}

google_drive() {
	if [[ -d $HOME/Drive ]]; then
		say 'pull could data'
		DRY=n $HOME/bin/cloud pull
	fi
}

google_photos() {
	if [[ -d $HOME/Pictures/Google ]]; then
		say 'fetch google photos'
		$HOME/.local/bin/gphotos-sync ~/Pictures/Google/
	fi
}

is_running() {
	[[ $(systemctl --user is-active $SERVICE) == "active" ]]
}

tail_journal() {
	journalctl --user -fu $SERVICE
}

do_notify() {
	if command -v notify-send &> /dev/null; then
		notify-send "$@"
	elif command -v telegram-send &> /dev/null; then
		telegram-send "$@"
	fi

	$HOME/bin/systemd-email sdf@fomichev.me $SERVICE "$(hostname) backup $@"
}

# Started without arguments.
if [[ $# -eq 0 ]]; then
	# Started manually via shell, start systemd service instead.
	if [[ -z "$INVOCATION_ID" ]]; then
		# Already running, tail journal.
		if is_running; then
			tail_journal
			exit
		fi

		systemctl --user start $SERVICE
		tail_journal
		exit
	fi

	# Otherwise, run default actions.
	trap failure EXIT

	do_notify "started"
	#standard_notes
	#google_drive
	#google_photos

	do_rstc \
		--verbose \
		$ARGS \
		--exclude-file $HOME/src/dotfiles/.restic-exclude \
		backup /

	do_rstc unlock

	do_rstc snapshots
	do_rstc forget --keep-within 95d --prune
	do_rstc stats
	do_notify "finished"
	docker_update
	system_upgrade
	adblock_upgrade
	system_cleanup
	system_pacnew
	do_notify "updated"
	trap - EXIT
	exit
fi

do_rstc "$@"
