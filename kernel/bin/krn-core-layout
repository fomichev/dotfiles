#!/usr/bin/env python3

import sys
import argparse
import time
import datetime

thread_len = 3

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--show', type=str)
parser.add_argument('-c', '--cols_per_line', type=int, default=8)
parser.add_argument('--cpuinfo', type=str, default='/proc/cpuinfo')
parser.add_argument('--stat', type=str, default='/proc/stat')
parser.add_argument('-u', '--utilization', action='store_true')
parser.add_argument('-t', '--top', type=int)
parser.add_argument('-1', '--once', action='store_true')

args = parser.parse_args()

def read_cpuload(path):
    stats = {}
    with open(path, 'r') as f:
        for line in f:
            cols = line.split(' ' )
            if cols[0] == 'cpu':
                continue
            if not cols[0].startswith('cpu'):
                continue

            cols[0] = int(cols[0].replace('cpu', ''))
            cols = [ int(x) for x in cols ]

            cpu = cols[0]
            stats[cpu] = {
                'user': cols[1],
                'nice': cols[2],
                'system': cols[3],
                'idle': cols[4],
                'iowait': cols[5],
                'irq': cols[6],
                'softirq': cols[7],
                'steal': cols[8],
            }

    return stats

def diff_cpuload(before, after):
    diff = {}
    for k in before.keys():
        diff[k] = after[k] - before[k]
    return diff

def parse_layout(cpuinfo):
    sockets = {}

    for line in cpuinfo:
        cols = [ x.strip() for x in line.split(':') ]
        if len(cols) != 2:
            continue
        if cols[0] == 'processor':
            cpuid = int(cols[1])
        elif cols[0] == 'physical id':
            socket = int(cols[1])
        elif cols[0] == 'core id':
            coreid = int(cols[1])

            if socket not in sockets:
                sockets[socket] = {}

            if coreid not in sockets[socket]:
                sockets[socket][coreid] = []

            sockets[socket][coreid].append(cpuid)

    return sockets

def red(val):
    return f"\033[31m{val}\033[0m"

def yellow(val):
    return f"\033[33m{val}\033[0m"

def range_to_symbol(val):
    sym = ' '

    # ⢀⣀⣠⣤⣴⣶⣾⣿⡮⡯
    if val >= 99:
        sym = '⡯'
    if val >= 95:
        sym = '⡮'
    elif val >= 90:
        sym = "⣿"
    elif val >= 80:
        sym = "⣾"
    elif val >= 70:
        sym = "⣶"
    elif val >= 60:
        sym = "⣴"
    elif val >= 50:
        sym = "⣤"
    elif val >= 40:
        sym = "⣠"
    elif val >= 20:
        sym = "⣀"
    elif val >= 10:
        sym = "⢀"

    return sym

def irq_idle_sys(before, after):
    diff = diff_cpuload(before, after)
    diff_totl = sum(diff.values())

    irq = (diff['irq'] + diff['softirq']) * 100 // diff_totl
    idle = diff['idle'] * 100 // diff_totl
    system = (diff['system'] + diff['iowait']) * 100 // diff_totl

    return irq, idle, system

def utilization_bars(irq, idle, system):
    return range_to_symbol(100 - idle) + red(range_to_symbol(irq)) + yellow(range_to_symbol(system))

def find_sibling(sockets, want_cpu):
    for socket in sockets:
        for core in sockets[socket]:
            for cpu in sockets[socket][core]:
                if want_cpu == cpu:
                    return sockets[socket][core]
    return None

def print_top(sockets, cpuload_before, cpuload_after, n):
    util = {}
    util_list = []

    for socket in sockets:
        for core in sockets[socket]:
            for cpu in sockets[socket][core]:
                irq, idle, system = irq_idle_sys(before[cpu], after[cpu])
                util[cpu] = (irq, idle, system)
                util_list.append((cpu, irq, idle, system))

    util_list = sorted(util_list, key=lambda x: x[2])
    for i in util_list:
        cpu, irq, idle, system = i
        user = 100 - idle - system - irq

        core = find_sibling(sockets, cpu)
        lhs = utilization_bars(*util[core[0]])
        rhs = utilization_bars(*util[core[1]])
        print(f"cpu {cpu:{thread_len}} idle {idle:3}% irq {irq:3}% sys {system:3}% usr {user:3}% [{lhs}|{rhs}]")

        n -= 1
        if n <= 0:
            break

    print()

def print_layout(sockets, cpuload_before, cpuload_after):
    now = datetime.datetime.now()

    ln = 0
    first_socket = True

    for socket in sockets.keys():
        if first_socket:
            print(f"SOCKET {socket} {now}")
        else:
            print(f"SOCKET {socket}")

        first_socket = False

        keys = list(sockets[socket].keys())

        for i in range(0, len(sockets[socket]), cores_per_line):
            print(f"{ln:02x} ", end='')
            ln += 1

            for j in range(cores_per_line):
                if i+j not in keys:
                    continue

                coreid = keys[i+j]
                core = sockets[socket][coreid]
                lhs = core[0]

                lhs_pre = ""
                lhs_post = ""

                for hc in show:
                    if hc == core[0]:
                        lhs_pre = "\033[31m"
                        lhs_post = "\033[0m"
                        break

                rhs = ""

                rhs_pre = ""
                rhs_post = ""

                if len(core) > 1:
                    rhs = core[1]

                    for hc in show:
                        if hc == core[1]:
                            rhs_pre = "\033[31m"
                            rhs_post = "\033[0m"
                            break

                if cpuload_before and cpuload_after:
                    lhs = utilization_bars(*irq_idle_sys(before[lhs], after[lhs]))

                    if len(core) > 1:
                        rhs = utilization_bars(*irq_idle_sys(before[rhs], after[rhs]))
                    #print(f"{lhs} {rhs}|", end='')
                    print(f"[{lhs}|{rhs}]", end='')
                else:
                    print(f"[{lhs_pre}{lhs:{thread_len}}{lhs_post}|{rhs_pre}{rhs:{thread_len}}{rhs_post}]", end='')
            print()

show = []
if args.show:
    if ',' in args.show:
        show = [ int(x) for x in args.show.strip(',').split(',')]
    else:
        show = [ int(x) for x in args.show.split(' ')]
cores_per_line = args.cols_per_line

if args.cpuinfo == '-':
    cpuinfo = sys.stdin
else:
    cpuinfo = open(args.cpuinfo, "r")

layout = parse_layout(cpuinfo)

if args.utilization:
    before = read_cpuload(args.stat)

    while True:
        time.sleep(1)
        after = read_cpuload(args.stat)
        if args.top:
            print_top(layout, before, after, args.top)
        else:
            print_layout(layout, before, after)
        before = after

        if args.once:
            break
else:
    print_layout(layout, None, None)
