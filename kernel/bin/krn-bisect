#!/usr/bin/env python3
#
# krn-bisect -t "krn-test -q net/bpf_offload.py"

import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument('-g', '--good', type=str, default='net-next/main')
parser.add_argument('-b', '--bad', type=str, default='HEAD')
parser.add_argument('--build', type=str, default='krn-mrproper && krn-build-qemu && krn-build-selftests')
parser.add_argument('-t', '--test', type=str, default='krn-run-script')
args = parser.parse_args()

def checkout(commit):
    print(f'checkout {commit}')
    subprocess.check_call(['git', 'checkout', commit ])

def compile(cmd):
    subprocess.check_call([cmd], shell=True)

def test(cmd):
    return subprocess.run([cmd], shell=True).returncode

def sanity_check(good, bad):
    print(f'make sure the test passes on {good} and fails on {bad}')

    checkout(good)
    compile(args.build)
    if test(args.test) != 0:
        raise Exception(f'good revision failed the test')

    checkout(bad)
    compile(args.build)
    if test(args.test) == 0:
        raise Exception(f'bad revision passed the test')

subprocess.call(['git', 'bisect', 'reset'])
good = subprocess.check_output(['git', 'rev-parse', args.good]).strip()
bad = subprocess.check_output(['git', 'rev-parse', args.bad]).strip()

sanity_check(good, bad)
subprocess.check_call(['git', 'bisect', 'start', args.bad, args.good])
subprocess.check_call(['git', 'bisect', 'run', 'sh', '-c', f'{args.build} || exit 125; {args.test}'])
subprocess.check_call(['git', 'bisect', 'reset'])
