# requires: autoconf, automake, pkg-config, libtool, libtool-bin

OPT:=$(HOME)/opt
OPT_GIT:=$(OPT)/git
OPT_TAR:=$(OPT)/tarball
PREFIX:=$(HOME)/opt

MAX_NPROC:=16
NPROC:=$(shell nproc)
NPROC:=$(shell echo 'if($(NPROC)>$(MAX_NPROC)){$(MAX_NPROC)}else{$(NPROC)}' | bc)
export CMAKE_BUILD_PARALLEL_LEVEL=$(NPROC)

$(info $(CMAKE_BUILD_PARALLEL_LEVEL))

ifneq ($(GIT),)
PKG_SRC:=$(OPT_GIT)/$(NAME)
STAGE_FETCH:=$(PKG_SRC)/.fetch_$(NAME)
STAGE_BUILD:=$(PKG_SRC)/.build_$(NAME)
endif

ifneq ($(TAR),)
PKG_SRC:=$(OPT_TAR)/$(NAME)
STAGE_FETCH:=$(OPT_TAR)/.fetch_$(NAME)
STAGE_BUILD:=$(OPT_TAR)/.build_$(NAME)
endif

PKG_BLD=$(PKG_SRC)/build

CURRENT_MAKEFILE:=$(firstword $(MAKEFILE_LIST))
CURRENT_MAKEFILE_PATH:=$(abspath $(CURRENT_MAKEFILE))
CURRENT_MAKEFILE_DIR:=$(shell dirname $(CURRENT_MAKEFILE_PATH))
CURRENT_VERSION:=$(shell cat $(STAGE_FETCH))
SUBMAKE:=$(MAKE) -C $(CURRENT_MAKEFILE_DIR) -f $(CURRENT_MAKEFILE)

all: $(PREFIX) $(OPT_GIT) $(OPT_TAR) $(STAGE_BUILD)

$(PREFIX):
	mkdir -p $(PREFIX)
	mkdir -p $(PREFIX)/bin

$(OPT_GIT):
	mkdir -p $(OPT_GIT)

$(OPT_TAR):
	mkdir -p $(OPT_TAR)

$(STAGE_FETCH): fetch

$(STAGE_BUILD): $(STAGE_FETCH)
	$(SUBMAKE) build
	touch $(STAGE_BUILD)

.PHONY: all build fetch

fetch_git_existing:
	( \
		cd $(PKG_SRC) && \
		git pull --ff-only && \
		[ "$(CURRENT_VERSION)" = "`git describe --always`" ] || \
			git describe --always > $(STAGE_FETCH) \
	)

fetch_git_new:
	( \
		cd $(OPT_GIT) && \
		git clone $(GIT) $(PKG_SRC) && \
		cd $(PKG_SRC) && \
		git describe --always > $(STAGE_FETCH) \
	)

fetch_git:
	[ -d $(OPT_GIT) ] && : || mkdir -p $(OPT_GIT)
	[ -d $(PKG_SRC) ] && \
		$(SUBMAKE) fetch_git_existing || \
		$(SUBMAKE) fetch_git_new

ifneq ($(TAR),)
TARBALL:=$(OPT_TAR)/$(shell basename $(TAR))

fetch_tar: $(TARBALL)

$(TARBALL):
	curl -L $(TAR) > $(TARBALL)
	touch $(STAGE_FETCH)
endif

fetch:
ifneq ($(GIT),)
	$(SUBMAKE) fetch_git
endif
ifneq ($(TAR),)
	$(SUBMAKE) fetch_tar
endif

pre_configure:

post_install:

build_autoconf:
	[ -x $(PKG_SRC)/autogen.sh ] && (cd $(PKG_SRC) && ./autogen.sh) || :
	$(SUBMAKE) pre_configure
	(cd $(PKG_SRC) && ./configure --prefix=$(PREFIX) $(CONFIGURE_FLAGS))
	$(MAKE) -j$(NPROC) -C $(PKG_SRC) $(BUILD_FLAGS)
	$(MAKE) -C $(PKG_SRC) $(INSTALL_FLAGS) install
	$(SUBMAKE) post_install

build_cmake:
	mkdir -p $(PKG_BLD)
	(cd $(PKG_BLD) && \
		cmake $(CMAKE_FLAGS) .. && \
		cmake --build . && \
		cmake $(INSTALL_FLAGS) \
			-DCMAKE_INSTALL_PREFIX=$(PREFIX) \
			-P cmake_install.cmake)
