#!/bin/bash

set -e

__usage() {
	echo "usage: mk <recipe>"
	echo "       mk <recipe> clean"
	exit 1
}

BASEDIR="$HOME/opt"
STAMP="$BASEDIR/stamp"
SRC="$BASEDIR/src"

FILE="$1"
PKG="$(basename "$FILE")"
[ -z "$FILE" ] && __usage
shift
if [ ! -z "$1" ]; then
	CMD="$1"
	shift
fi

S="$SRC/$PKG"
B="$BASEDIR/build/$PKG"
R="$BASEDIR/sysroot"
PKG_STAMP_FETCH="$STAMP/${PKG}_fetch"
PKG_STAMP_BUILD="$STAMP/${PKG}_build"

PREFIX="$R"

# PACKAGES CAN CONFIGURE THESE
# {{{
ver=
source=

configure_flags=(--prefix=$PREFIX)
make_flags=()
cmake_flags=()
install_flags=()
src_subdir="" # cd into this sub-directory before trying to build
skip_steps=() # skip "build" or "install" step

pre_build() { :; }
post_build() { :; }
# }}}

# PACKAGES WILL GET THE FOLLOWING EXPORTED TO pre_build AND post_build
# {{{
# S - source directory
# B - build directory
# R - install root directory
# }}}

MAX_NPROC=64
NPROC=$(nproc)
NPROC=$(echo "if(${NPROC}>${MAX_NPROC}){${MAX_NPROC}}else{${NPROC}}" | bc)
export CMAKE_BUILD_PARALLEL_LEVEL=$NPROC

say() { echo "${PKG}: $@"; }
die() { echo "${PKG}: $@"; exit 1; }

[ -z "$PKG" ] && { die "Specify package name!"; }

say "NPROC=$NPROC PREFIX=$PREFIX R=$R"

ENV_PATH=
__finish() {
	RET=$?
	if [ $RET -ne 0 ]; then
		echo "FAILED: $RET"
	fi

	if [ ! -z "$ENV_PATH" ]; then
		rm $ENV_PATH
	fi
}
trap __finish EXIT

__with_clean_env() {
	if [ -z "$ENV_PATH" ]; then
		ENV_PATH=$(mktemp /tmp/mk.XXXXXX)
	fi

	# Save all environment variables into a temporary file.
	export -p > $ENV_PATH

	# Unexport most of the things we don't care about.
	while IFS='=' read -rd '' var value ; do
		case "$var" in
			# Bash read only.
			BASHOPTS) continue ;;
			BASH_ARGC) continue ;;
			BASH_ARGV) continue ;;
			BASH_LINENO) continue ;;
			BASH_SOURCE) continue ;;
			BASH_VERSINFO) continue ;;
			EUID) continue ;;
			PPID) continue ;;
			SHELLOPTS) continue ;;
			UID) continue ;;
			# API between the script and package definitions.
			PATH) continue ;;
			R) continue ;;
			B) continue ;;
			S) continue ;;
			# The rest is cleared.
			*) unset "$var" ;;
		esac
	done < /proc/self/environ

	eval "$@"

	# Restore original environment.
	source $ENV_PATH
}

__fetch_git() {
	local s="$1"
	local dirname="$2"

	if [ -d "$dirname" ]; then
		(cd $dirname && git pull --ff-only)
	else
		git clone $s $dirname
	fi

	(cd $dirname && git describe --always) >> $PKG_STAMP_FETCH

	if [ ! -e "$PKG" ]; then
		ln -s $dirname $PKG
	fi
}

__fetch_tar() {
	local s="$1"

	if [ ! -e "$(basename $s)" ]; then
		say "fetching $s into $PWD"
		curl -LO "$s"
		say "extracting $s into $S"
		mkdir -p "$S"
		tar xf "$(basename $s)" -C "$S"
	fi

	echo "$s" >> $PKG_STAMP_FETCH
}

fetch() {
	rm -f $PKG_STAMP_FETCH

	if [ -e "$source" ]; then
		die "No source specified!"
	fi

	for s in ${source[@]}; do
		local fullname="$(basename $s)"
		local extension="${fullname##*.}"
		local dirname="${fullname%.*}"
		local protocol="$(echo "$s" | sed -e's,^\(.*\)://.*,\1,g')"

		if [ "$protocol" = "git" ]; then
			extension=git
		fi

		case "$extension" in
			git) __fetch_git "$s" "$dirname" ;;
			*) __fetch_tar "$s" ;;
		esac
	done
}

__invoke_step() {
	for step in ${skip_steps[@]}; do
		if [ "$step" = "$1" ]; then
			return 1
		fi
	done
	return 0
}

__build_cmake() {
	cmake -DCMAKE_INSTALL_PREFIX=$R ${cmake_flags[@]} "$1"
	cmake --build .
	cmake ${install_flags[@]} \
		-DCMAKE_INSTALL_PREFIX=$R \
		-P cmake_install.cmake
}

__build_autoconf() {
	[ -x "$S/autogen.sh" ] && (cd "$S" && ./autogen.sh) || :
	$S/configure --prefix=$PREFIX ${configure_flags[@]}
	make -j$NPROC "${make_flags[@]}"
	__invoke_step install && make "${install_flags[@]}" install || :
}

__build_make() {
	make -j$NPROC "${make_flags[@]}"
	__invoke_step install && make "${install_flags[@]}" install || :
}

__src_path() {
	if [ -e "$src_subdir" ]; then
		echo "$S"
	else
		echo "$S/$src_subdir"
	fi
}

build() {
	local src="$(__src_path)"

	if [ -f "$src/CMakeLists.txt" ]; then
		__build_cmake "$src"
	elif [ -f "$src/configure" -o -f "$src/configure.ac" ]; then
		# build in the source tree
		B="$src"
		cd "$B"

		__build_autoconf
	elif [ -f "$src/Makefile" ]; then
		# build in the source tree
		B="$src"
		cd "$B"

		__build_make
	else
		die "Unsupported build system!"
	fi
}

[ ! -e "$FILE" ] && {
	echo "File '$FILE' not found"
	exit 1
} || source "$FILE"

__checksum() {
	sha256sum "$1" 2>&1 | cut -d' ' -f1
}

__checksum_matches() {
	test "$(__checksum "$1")" = "$(__checksum "$2")"
}

__clean() {
	say "clean"

	pushd $SRC
	for s in ${source[@]}; do
		if [ -e "$s" ]; then
			rm -f $(basename $s)
		fi
	done
	popd

	rm -f  $PKG_STAMP_FETCH $PKG_STAMP_BUILD
	rm -rf $B $S
}

__build() {
	mkdir -p "$SRC" "$STAMP" "$R/bin"

	say "fetch $S"
	(cd $SRC && fetch)

	if __checksum_matches "$PKG_STAMP_FETCH" "$PKG_STAMP_BUILD"; then
		say "build is up to date"
		say "run '$0 $FILE clean' to force rebuild"
		exit 0
	fi

	say "pre build $B"
	[ -e "$S" ] && (cd $S && __with_clean_env pre_build)
	__invoke_step build && {
		say "build $B"
		rm -rf "$B"
		mkdir -p "$B"
		cd $B && build
	} || :
	say "post build $B"
	(cd $B && __with_clean_env post_build)

	cp "$PKG_STAMP_FETCH" "$PKG_STAMP_BUILD"
}

case "$CMD" in
	clean) __clean ;;
	help) __usage ;;
	*) __build ;;
esac
